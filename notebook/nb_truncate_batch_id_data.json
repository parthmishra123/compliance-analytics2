{
	"name": "nb_truncate_batch_id_data",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "audaxsparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "bb369200-086c-4b32-a655-020562a06091"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/69a89c4c-53f5-464f-b379-e208fddb5117/resourceGroups/Attendance_Management_System/providers/Microsoft.Synapse/workspaces/compliance-analytics-synapse-ws/bigDataPools/audaxsparkpool",
				"name": "audaxsparkpool",
				"type": "Spark",
				"endpoint": "https://compliance-analytics-synapse-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/audaxsparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"df = spark.read.format('delta').load('abfss://silver@lwlhstorageprd.dfs.core.windows.net/data/lw_datalake/s2_telemetry/e_dtc/')\r\n",
					"print(df.count())"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark.read.format('delta').load('abfss://silver@lwlhstorageprd.dfs.core.windows.net/data/lw_datalake/s2_telemetry/e_dtc/')\r\n",
					"df = df.filter(df.batch_id != '2024-05-09T08:25:33.9200446Z')\r\n",
					"\r\n",
					"print('Filtered records :',df.count())\r\n",
					"\r\n",
					"df.write.format('delta').mode('overwrite').save('abfss://silver@lwlhstorageprd.dfs.core.windows.net/data/lw_datalake/s2_telemetry/e_dtc_0905/')"
				],
				"execution_count": 2
			}
		]
	}
}